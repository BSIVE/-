#include <stdio.h>
#include <stdlib.h>
#include<iostream>

using namespace std;

typedef struct stack {
   
    int top;
    
    int *content_;

    int (* pop)(struct stack *);
    void (* push)(struct stack *, int);
} stack;

void dump(stack *deck) {
    printf("堆疊 (stack)： [");

    for (int i= 0; i < deck->top; i ++) {
        printf(" %d", deck->content_[i]);
    }

    printf(" ] top = %d\n", deck->top);
}

int pop(stack *deck) {
    return deck->content_[-- deck->top];
}

void push(stack *deck, int i) {
    deck->content_[deck->top ++] = i;
}

int main() 
{

	 
	 cout<<"中置式"<<endl; 
	 cout<<"(3+3)/(2-1)"<<endl;
	 cout<<"後置式"<<endl;
	 cout<<"33+21-/"<<endl;

	deck->push(deck, "3");
        dump(deck);
	deck->push(deck, "3");
        dump(deck);
	deck->push(deck, "+");
        dump(deck);
	deck->pop(deck));
        dump(deck);
    int s=0;
	s=3+3;
	deck->push(deck, "s");
        dump(deck);
    deck->push(deck, "2");
        dump(deck);
	deck->push(deck, "1");
        dump(deck);
    deck->push(deck, "-");
        dump(deck);    
    deck->pop(deck));
        dump(deck);   
	int x=0; 
    x=2-1;    
    deck->push(deck, "x");
        dump(deck);
    deck->push(deck, "/");
        dump(deck);    
    deck->pop(deck));
        dump(deck);  
	int y=0;
	y=s/x;
	deck->push(deck, "y");
        dump(deck);  
    deck->pop(deck));
        dump(deck);  
    
    cout<<y<<endl;
}





